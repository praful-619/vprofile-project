pipeline {
    agent any
    tools {
        maven  "maven3"
        jdk  "jdk17"
    }
    
    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub' // Jenkins credentials ID for Docker Hub
        DOCKER_IMAGE_NAME = 'stepstech/devops-weekend'
        DOCKER_TAG = '${BUILD_ID}' // You can use versioning or a unique tag as needed
        //DOCKER_HOST = '172.31.72.40'
        //registry = "devops-weekend"
        CONTAINER_NAME = "webapp-${env.BUILD_ID}"
        //PREVIOUS_BUILD = "${env.previousBuild}"
        
    }

    stages {
        stage ('Fetching code') {
            steps {
                git branch : 'main' , url: 'https://github.com/prafulitankar/vprofile-project-old.git'
            }
        }

        stage ('Source code build'){
            steps {
                sh 'mvn install -DskipTests'  
            }

            post {
            success {  
                echo 'Archieving the Artifact'
                archiveArtifacts artifacts: '**/*.war'
            }
          }
        }

        stage ('Unit Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage ('Checkstyle Analysis'){
            steps {
                sh 'mvn checkstyle:checkstyle'
            }

        }
        stage ("Artifact Uploader"){
            steps {
                nexusArtifactUploader(
                nexusVersion: 'nexus3',
                protocol: 'http',
                nexusUrl: '172.31.46.89:8081', // Do not use http here and we also use Private Ip of Nexus Server
                groupId: 'Test', // this is mendatory and value can be optional
                version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}", //Enable  BUILD_TIMESTAMP from System
                repository: 'vproject',
                credentialsId: 'nexuslogin',
                artifacts: [
                    [artifactId: 'vproapp',
                    classifier: '',
                    file: 'target/vprofile-v2.war',
                    type: 'war']
                ]
             )
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    docker.build("${DOCKER_IMAGE_NAME}:${BUILD_ID}")
                }
            }
        }
        
        stage('List Running Docker Container') {
            steps {
                sh 'docker ps -q'
                echo "Running container having above ids"
                sh 'docker container stop $(docker ps -qa)'
                sh 'docker container rm $(docker ps -qa)'
                 
            }
        }
        stage('Build Docker Container') {
            steps {
                script {
                    // Run Docker container from image
                    docker.image("${DOCKER_IMAGE_NAME}:${BUILD_ID}").run('-p 80${BUILD_ID}:8080 --name ${CONTAINER_NAME}') // Example run options: detached mode, port mapping
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                        echo 'Logged in to Docker Hub'
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    // Push the Docker image to Docker Hub
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                        docker.image("${DOCKER_IMAGE_NAME}:${BUILD_ID}").push("${BUILD_ID}")
                        echo 'Docker Image Successfully Pushed to Docker Hub'
                    }
                }
            }
        }
    }
    
        post {
            success {
                echo 'Dockerised Application Deployed Successfully!'
        }
            failure {
                echo 'There was an issue with building Dockerised Application.'
        }
    }
}
